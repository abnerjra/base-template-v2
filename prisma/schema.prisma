// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  lastName  String    @map("last_name") @db.VarChar(100)
  email     String    @unique @db.VarChar(70)
  password  String
  active    Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relaciones
  authToken   AuthToken[]
  userHasRole UserHasRole[]

  @@map("user")
}

model AuthToken {
  token     String  @id
  revoked   Boolean @default(false)
  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  createdAt Int     @map("created_at")
  expiresAt Int     @map("expires_at")

  @@map("auth_token")
}

model CatModule {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  key         String    @db.VarChar(15)
  description String?   @db.VarChar(255)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relaciones
  permissionsModule PermissionModule[]
  permissions       Permissions[]

  @@map("cat_module")
}

model CatPermissionList {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  key       String    @db.VarChar(15)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relaciones
  permissions PermissionModule[]

  @@map("cat_permission_list")
}

model PermissionModule {
  moduleId         Int @map("module_id")
  permissionListId Int @map("permission_list_id")

  // Relaciones
  module         CatModule         @relation(fields: [moduleId], references: [id])
  permissionList CatPermissionList @relation(fields: [permissionListId], references: [id])

  @@id([moduleId, permissionListId]) // Clave primaria compuesta
  @@map("permission_module")
}

model Roles {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  key         String    @db.VarChar(15)
  description String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relaciones
  roleHasPermission RoleHasPermissions[]
  userHasRole       UserHasRole[]

  @@map("roles")
}

model Permissions {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  action      String    @db.VarChar(15)
  description String    @db.VarChar(50)
  active      Boolean   @default(true)
  moduleId    Int       @map("module_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  module CatModule @relation(fields: [moduleId], references: [id])

  roleHasPermission RoleHasPermissions[]

  @@map("permissions")
}

model RoleHasPermissions {
  roleId       Int @map("role_id")
  permissionId Int @map("permission_id")

  role        Roles       @relation(fields: [roleId], references: [id])
  permissions Permissions @relation(fields: [permissionId], references: [id])

  // Relaciones
  @@id([roleId, permissionId])
  @@map("role_has_permissions")
}

model UserHasRole {
  roleId Int @map("role_id")
  userId Int @map("user_id")

  // Relaciones
  role Roles @relation(fields: [roleId], references: [id])
  user User  @relation(fields: [userId], references: [id])

  @@id([roleId, userId])
  @@map("user_has_role")
}
